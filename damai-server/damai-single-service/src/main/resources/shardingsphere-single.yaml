dataSources:    
  ds:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://82.157.255.105:3306/damai?useUnicode=true&characterEncoding=UTF-8&rewriteBatchedStatements=true&allowMultiQueries=true&serverTimezone=Asia/Shanghai
    username: root
    password: qaz321qwe!
    
rules:
  # 分库分表规则
  - !SHARDING
    tables:
      # 对d_user_mobile表进行分表
      d_user_mobile:
        # 库为damai 表为d_user_mobile_0 至 d_user_mobile_1
        actualDataNodes: ds.d_user_mobile_${0..1}
        # 分表策略      
        tableStrategy:
          standard:
            # 使用user_mobile作为分片键
            shardingColumn: mobile
            # 用user_mobile列使用hash取模作为分表算法
            shardingAlgorithmName: tableUserMobileHashMod
      # 对d_user_email表进行分表
      d_user_email:
        # 库为damai 表为d_user_email_0 至 d_user_email_1
        actualDataNodes: ds.d_user_email_${0..1}
        # 分表策略      
        tableStrategy:
          standard:
            # 使用email作为分片键
            shardingColumn: email
            # 用user_mobile列使用hash取模作为分表算法
            shardingAlgorithmName: tableUserEmailHashMod      
      # 对d_user表进行分表
      d_user:
        # 库为damai 表为d_user_0 至 d_user_1
        actualDataNodes: ds.d_user_${0..1}
        # 分表策略      
        tableStrategy:
          standard:
            # 使用id作为分片键
            shardingColumn: id
            # 用user_mobile列使用hash取模作为分表算法
            shardingAlgorithmName: tableUserHashModModel
      # 对d_ticket_user表进行分表
      d_ticket_user:
        # 库为damai 表为d_ticket_user_0 至 d_ticket_user_1
        actualDataNodes: ds.d_ticket_user_${0..1}
        # 分表策略      
        tableStrategy:
          standard:
            # 使用id作为分片键
            shardingColumn: id
            # 用user_mobile列使用hash取模作为分表算法
            shardingAlgorithmName: tableTicketUserHashModModel
      # 对d_order表进行分表
      d_order:
        # 库为damai 表为d_order_0 至 d_user_order_3
        actualDataNodes: ds.d_order_${0..3}
        # 分表策略
        tableStrategy:
          complex:
            # 使用order_number,user_id作为分片键
            shardingColumns: order_number,user_id
            # 使用order_number,user_id分表算法
            shardingAlgorithmName: tableOrderComplexGeneArithmetic
      # 对d_order_ticket_user表进行分表
      d_order_ticket_user:
        # 库为damai 表为d_order_ticket_user_0 至 d_order_ticket_user_3
        actualDataNodes: ds.d_order_ticket_user_${0..3}
        # 分表策略
        tableStrategy:
          complex:
            # 使用order_number,user_id作为分片键
            shardingColumns: order_number,user_id
            # 使用order_number,user_id分表算法
            shardingAlgorithmName: tableOrderTicketUserComplexGeneArithmetic
      # 对d_program表进行分表
      d_program:
        # 库为damai 表为d_program_0 至 d_program_1
        actualDataNodes: ds.d_program_${0..1}
        # 分表策略
        tableStrategy:
          standard:
            # 使用id作为分片键
            shardingColumn: id
            # 使用id分表算法
            shardingAlgorithmName: tableProgramHashModModel
      # 对d_program_show_time表进行分表
      d_program_show_time:
        # 库为damai 表为d_program_show_time_0 至 d_program_show_time_1
        actualDataNodes: ds.d_program_show_time_${0..1}
        # 分表策略
        tableStrategy:
          standard:
            # 使用id作为分片键
            shardingColumn: program_id
            # 使用id分表算法
            shardingAlgorithmName: tableProgramShowTimeHashModModel
      # 对d_seat表进行分表
      d_seat:
        # 库为damai 表为d_seat_0 至 d_seat_1
        actualDataNodes: ds.d_seat_${0..1}
        # 分表策略
        tableStrategy:
          standard:
            # 使用id作为分片键
            shardingColumn: program_id
            # 使用id分表算法
            shardingAlgorithmName: tableSeatHashModModel
      # 对d_ticket_category表进行分表
      d_ticket_category:
        # 库为damai 表为d_ticket_category_0 至 d_ticket_category_1
        actualDataNodes: ds.d_ticket_category_${0..1}
        # 分表策略
        tableStrategy:
          standard:
            # 使用id作为分片键
            shardingColumn: program_id
            # 使用id分表算法
            shardingAlgorithmName: tableTicketCategoryHashModModel
      # 对d_pay_bill表进行分表
      d_pay_bill:
        # 库为damai 表为d_pay_bill_0 至 d_pay_bill_1
        actualDataNodes: ds.d_pay_bill_${0..1}
        # 分表策略      
        tableStrategy:
          standard:
            # 使用out_order_no作为分片键
            shardingColumn: out_order_no
            # 用out_order_no列使用hash取模作为分表算法
            shardingAlgorithmName: tablePayHashModModel
    # 绑定表        
    bindingTables:
      - d_order,d_order_ticket_user
    # 广播表
    broadcastTables:
      - d_program_category
    # 具体的算法        
    shardingAlgorithms:
      # d_user_mobile表分表算法
      tableUserMobileHashMod:
        type: HASH_MOD
        props:
          # 分表数量
          sharding-count: 2
      # d_user_email表分表算法
      tableUserEmailHashMod:
        type: HASH_MOD
        props:
          # 分表数量
          sharding-count: 2    
      # d_user表分表算法
      tableUserHashModModel:
        type: MOD
        props:
          # 分表数量
          sharding-count: 2
      # d_ticket_user表分表算法
      tableTicketUserHashModModel:
        type: MOD
        props:
          # 分表数量
          sharding-count: 2
      # d_order表分表算法
      tableOrderComplexGeneArithmetic:
        # 通过自定义实现类实现分表算法
        type: CLASS_BASED
        props:
          # 分表数量
          sharding-count: 4
          # 分表策略，复合多分片
          strategy: complex
          # 具体的分表逻辑在此自定义类中
          algorithmClassName: com.damai.shardingsphere.TableOrderComplexGeneArithmetic
      # d_order_ticket_user表分表算法
      tableOrderTicketUserComplexGeneArithmetic:
        # 通过自定义实现类实现分表算法
        type: CLASS_BASED
        props:
          # 分表数量
          sharding-count: 4
          # 分表策略，复合多分片
          strategy: complex
          # 具体的分表逻辑在此自定义类中
          algorithmClassName: com.damai.shardingsphere.TableOrderComplexGeneArithmetic
      # d_program表分表算法
      tableProgramHashModModel:
        type: MOD
        props:
          # 分表数量
          sharding-count: 2
      # d_program_show_time表分表算法
      tableProgramShowTimeHashModModel:
        type: MOD
        props:
          # 分表数量
          sharding-count: 2
      # d_seat表分表算法
      tableSeatHashModModel:
        type: MOD
        props:
          # 分表数量
          sharding-count: 2
      # d_ticket_category表分表算法
      tableTicketCategoryHashModModel:
        type: MOD
        props:
          # 分表数量
          sharding-count: 2
      # d_pay_bill表分表算法
      tablePayHashModModel:
        type: HASH_MOD
        props:
          # 分表数量
          sharding-count: 2
  # 加密规则
  - !ENCRYPT
    tables:
      # d_user表
      d_user:
        columns:
          # 对mobile列进行加密
          mobile:
            # 密文列mobile
            cipherColumn: mobile
            # 自定义的加密算法
            encryptorName: user_encryption_algorithm
          # 对password列进行加密
          password:
            # 密文列password
            cipherColumn: password
            # 自定义的加密算法
            encryptorName: user_encryption_algorithm
          # 对id_number列进行加密
          id_number:
            # 密文列id_number
            cipherColumn: id_number
            # 自定义的加密算法
            encryptorName: user_encryption_algorithm  
      # d_user_mobile表
      d_user_mobile:
        columns:
          # 对mobile列进行加密
          mobile:
            # 密文列id_number
            cipherColumn: mobile
            # 自定义的加密算法
            encryptorName: user_encryption_algorithm
      # d_ticket_user表
      d_ticket_user:
        columns:
          # 对id_number列进行加密
          id_number:
            # 密文列id_number
            cipherColumn: id_number
            # 自定义的加密算法
            encryptorName: user_encryption_algorithm      
    encryptors:
      user_encryption_algorithm:
        type: SM4
        props:
          sm4-key: d3ecdaa11d6ab89e1987870186073eaa
          sm4-mode: CBC
          sm4-iv: 1afc7fdce9ebc393f693cd3d23e35ed2
          sm4-padding: PKCS7Padding
props:
  # 打印真实sql
  sql-show: true      
      