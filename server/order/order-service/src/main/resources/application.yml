#服务端口
server:
  port: 8081
# 应用名称
spring:
  application:
    name: order-service
# nacos
  cloud:
    nacos:
      discovery:
        server-addr: 127.0.0.1:8848
        # 标识
        metadata:
          mark: true
  main:
    allow-bean-definition-overriding: true
feign:
  hystrix:
    enabled: true
  httpclient:
    enabled: false
  okhttp:
    enabled: true
  compression:
    request:
      #配置请求 GZIP 压缩
      enabled: true
      #配置压缩支持的 MIME TYPE
      mime-types: text/xml,application/xml,application/json
      #配置压缩数据大小的最小阀值，默认 2048
      min-request-size: 512
    response:
      #配置响应 GZIP 压缩
      enabled: true
    
#hystrix: 顶层配置，表示这是Hystrix的配置。
hystrix:
  threadpool:
    default:
      coreSize: 500
      maximumSize: 800
      allowMaximumSizeToDivergeFromCoreSize: true
  #command: 表示要配置的是Hystrix命令（即要应用断路器的方法）。
  command:
    default:
      coreSize: 50
      #execution: 表示与命令执行相关的配置。
      execution:
        timeout:
          enabled: true
        #isolation: 表示与命令隔离相关的配置。
        isolation:
          #thread: 表示使用线程隔离策略。
          thread:
            #timeoutInMilliseconds: 设置超时时间，单位为毫秒。
            timeoutInMilliseconds: 10000
            ribbon:
              ReadTimeout: 60000
              ConnectTimeout: 60000
    #在这个示例中，我们为ProductClient接口中的getV2(GetDto)方法设置了一个超时时间为100000毫秒（100秒）。当远程服务调用超过100秒时，Hystrix将触发超时并执行回退逻辑              
    ProductClient#getV2(GetDto):
      #execution: 表示与命令执行相关的配置。
      execution:
        #isolation: 表示与命令隔离相关的配置。
        isolation:
          #thread: 表示使用线程隔离策略。
          thread:
            #timeoutInMilliseconds: 设置超时时间，单位为毫秒。
            timeoutInMilliseconds: 100000
ribbon:
  ReadTimeout: 60000
  ConnectTimeout: 60000
  MaxAutoRetries: 0
  MaxAutoRetriesNextServer: 1
management:
  endpoints:
    web:
      exposure:
        include: '*'
    health:
      show-details: always
  security:
    enabled: false

